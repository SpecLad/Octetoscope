/*
  This file is part of Octetoscope.
  Copyright (C) 2013-2015 Octetoscope contributors (see /AUTHORS.txt)

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import org.apache.tools.ant.DirectoryScanner
import org.apache.tools.ant.filters.FixCrLfFilter

apply plugin: 'base'

def getVersionInfo() {
  def versionFile = file('version.gradle')

  if (versionFile.exists()) {
    def versionInfo = new VersionInfo(extraCommits: 0, commitHash: '0' * 40, dirty: false)
    apply from: versionFile, to: versionInfo
    if (versionInfo.releaseVersion == null)
      throw new InvalidUserDataException('version.gradle provided, but doesn\'t set releaseVersion')
    return versionInfo
  } else {
    return BuildUtils.getVersionInfo(project, 'release-')
  }
}

version = getVersionInfo()

ext {
  def scalaMajorVersion = '2.11'

  deps = [
    scalaLibrary: "org.scala-lang:scala-library:$scalaMajorVersion.5",
    scalaTest: "org.scalatest:scalatest_$scalaMajorVersion:2.2.4",
    icu: 'com.ibm.icu:icu4j:54.1.1',
    arm: "com.jsuereth:scala-arm_$scalaMajorVersion:1.4",
  ]
}

subprojects {
  apply plugin: 'scala'

  repositories {
    mavenCentral()
  }

  dependencies {
    compile deps.scalaLibrary

    testCompile deps.scalaTest
  }

  sourceCompatibility = '1.7'
  targetCompatibility = '1.7'

  test << {
    ant.taskdef(name: 'scalatest', classname: 'org.scalatest.tools.ScalaTestAntTask', classpath: classpath.asPath)
    ant.scalatest(runpath: testClassesDir, haltonfailure: 'true', fork: 'false') {
      reporter(type: 'stderr')
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.2.1'
}

task installLauncher(type: Jar) {
  from project(':application').sourceSets.main.output
  archiveName 'octetoscope.jar'
  destinationDir new File(buildDir, 'install/bin')
  manifest {
    attributes('Class-Path':
        "${-> project(':application').configurations.runtime.collect{'../lib/' + it.name}.join(' ')}")
    attributes('Main-Class': 'ru.corrigendum.octetoscope.application.Octetoscope')
  }
}

task installLibs(type: Sync) {
  from project(':application').configurations.runtime
  into new File(buildDir, 'install/lib')
}

task install(dependsOn: [installLauncher, installLibs])

// Using CRLFs as line endings in distributions, since that's the lowest common denominator.
def exportEOL = FixCrLfFilter.CrLf.newInstance('crlf')

// Gradle uses Ant's default excludes list when finding files to copy, which includes things
// like .gitattributes and .gitignore, which we don't want to exclude when building the source
// distribution. And we don't know for sure what else it might exclude, so it's best to empty it
// entirely. It shouldn't matter at all for our other copy-like tasks, since we never copy from
// directories that might have something ignorable in them.
// See also <https://issues.gradle.org/browse/GRADLE-1883>.
DirectoryScanner.defaultExcludes.each { DirectoryScanner.removeDefaultExclude(it) }
// Because of a bug in Gradle, having no excludes excludes everything. This pattern shouldn't
// match anything. See <https://github.com/gradle/gradle/pull/396>.
DirectoryScanner.addDefaultExclude("\0")

task distBinary(type: Zip) {
  classifier 'bin'
  into "$baseName-$version-$classifier"
  dirMode 0755
  fileMode 0644

  from(installLauncher.outputs) {
    into 'bin'
    fileMode 0755
  }

  from(installLibs.outputs) {
    into 'lib'
  }

  from(['AUTHORS.txt', 'COPYING.txt', 'README.txt']) {
    filter(FixCrLfFilter, eol: exportEOL)
  }
}

task generateVersionGradle(type: GenerateFileTask) {
  text = """\
    releaseVersion = '$version.releaseVersion'
    extraCommits = $version.extraCommits
    commitHash = '$version.commitHash'
    dirty = $version.dirty
    """.stripIndent()

  outputPath = new File(buildDir, 'generated/version.gradle')
}

task configureDistSource << {
  // This is in a separate task in order to defer the exported file enumeration until execution
  // time. This means we won't have to perform it when we run tasks unrelated to distSource.
  BuildUtils.getExportedFiles(rootProject).each { f ->
    // If we're building _from_ a source distribution, there's a version.gradle
    // in our work directory. We don't want to include that, or we'll end up with
    // two version.gradle files in the archive.
    if (f.path == 'version.gradle') return

    distSource.from(f.path) {
      into RelativePath.parse(true, f.path).parent.pathString
      if (f.executable) fileMode 0755
      // TODO: apply the CrLf filter where appropriate
    }
  }
}

task distSource(type: Zip, dependsOn: configureDistSource) {
  classifier 'src'
  into "$baseName-$version-$classifier"
  dirMode 0755
  fileMode 0644

  from(generateVersionGradle.outputs) {
    filter(FixCrLfFilter, eol: exportEOL)
  }
}

task dist(dependsOn: [distBinary, distSource])

defaultTasks 'build', 'install'
